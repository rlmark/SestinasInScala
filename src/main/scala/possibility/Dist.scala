package possibility

trait Dist[T] {
  def uniform(t: T): Dist[T]
  def categorical(t: T, prob: Prob[T]): Dist[T]
  // Think about these last few... what should their variable be called?
  def normal(next: Double => Double): Dist[Double]
  def beta(next: Double => Double): Dist[Double]
  def gamma(next: Double => Double): Dist[Double]

  // takes a likelihood and a prior, and can be used to observe some data generated by the model
  def condition(computeLikelihood: T => Prob[T]): Dist[T] => Dist[T]

  // provides a way to sample from the distribution
  def sample(random: Random[T] => Dist[T]): T
}

object Dist {
  implicit def distMonad[A]: Monad[Dist] = {
    new Monad[Dist] {
      override def pure[A](a: A): Dist[A] = ???
      override def flatMap[A, B](fa: Dist[A])(f: A => Dist[B]): Dist[B] = ???
    }
  }
}